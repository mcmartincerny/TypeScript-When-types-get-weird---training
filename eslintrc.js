module.exports = {
    env: {
      es2021: true,
      node: true,
    },
    parser: '@typescript-eslint/parser',
    parserOptions: {
      project: 'tsconfig.json',
      sourceType: 'module',
    },
    extends: [
      // "airbnb-base",
      'prettier',
      'plugin:prettier/recommended',
    ],
    plugins: [
      'eslint-plugin-import',
      'eslint-plugin-jsdoc',
      'eslint-plugin-unicorn',
      'eslint-plugin-react',
      '@typescript-eslint',
      'no-only-tests',
    ],
    ignorePatterns: ['**/generated/**'],
    rules: {
      'no-only-tests/no-only-tests': 'warn',
      '@typescript-eslint/adjacent-overload-signatures': 'error',
      '@typescript-eslint/ban-types': [
        'warn',
        {
          types: {
            Object: {
              message: 'Avoid using the `Object` type. Did you mean `object`?',
            },
            Function: {
              message: 'Avoid using the `Function` type. Prefer a specific function type, like `() => void`.',
            },
            Boolean: {
              message: 'Avoid using the `Boolean` type. Did you mean `boolean`?',
            },
            Number: {
              message: 'Avoid using the `Number` type. Did you mean `number`?',
            },
            String: {
              message: 'Avoid using the `String` type. Did you mean `string`?',
            },
            Symbol: {
              message: 'Avoid using the `Symbol` type. Did you mean `symbol`?',
            },
          },
        },
      ],
      '@typescript-eslint/consistent-type-assertions': 'error',
      '@typescript-eslint/consistent-type-definitions': 'off',
      '@typescript-eslint/dot-notation': 'warn',
      '@typescript-eslint/explicit-member-accessibility': [
        'error',
        {
          accessibility: 'no-public',
        },
      ],
      '@typescript-eslint/indent': 'off',
      '@typescript-eslint/member-delimiter-style': [
        'off',
        {
          multiline: {
            delimiter: 'none',
            requireLast: true,
          },
          singleline: {
            delimiter: 'semi',
            requireLast: false,
          },
        },
      ],
      '@typescript-eslint/member-ordering': 'off',
      '@typescript-eslint/naming-convention': [
        'warn',
        {
          selector: 'default',
          leadingUnderscore: 'allowSingleOrDouble',
          format: ['PascalCase', 'UPPER_CASE', 'camelCase', 'snake_case'],
        },
        {
          selector: ['objectLiteralProperty', 'enumMember', 'typeAlias', 'typeProperty'],
          format: null,
        },
      ],
      '@typescript-eslint/no-empty-function': 'error',
      '@typescript-eslint/no-empty-interface': 'warn',
      '@typescript-eslint/no-explicit-any': 'off',
      '@typescript-eslint/no-misused-new': 'error',
      '@typescript-eslint/no-namespace': 'error',
      '@typescript-eslint/no-parameter-properties': 'off',
      '@typescript-eslint/no-shadow': [
        'off',
        {
          hoist: 'all',
        },
      ],
      '@typescript-eslint/no-this-alias': 'error',
      '@typescript-eslint/no-unused-expressions': 'warn',
      '@typescript-eslint/no-use-before-define': 'off',
      '@typescript-eslint/no-var-requires': 'warn',
      '@typescript-eslint/prefer-for-of': 'error',
      '@typescript-eslint/prefer-function-type': 'error',
      '@typescript-eslint/prefer-namespace-keyword': 'error',
      '@typescript-eslint/quotes': 'off',
      '@typescript-eslint/semi': ['off', null],
      '@typescript-eslint/triple-slash-reference': [
        'error',
        {
          path: 'always',
          types: 'prefer-import',
          lib: 'always',
        },
      ],
      '@typescript-eslint/type-annotation-spacing': 'off',
      '@typescript-eslint/unified-signatures': 'error',
      'arrow-body-style': 'warn',
      'arrow-parens': ['off', 'always'],
      'brace-style': ['off', 'off'],
      'comma-dangle': 'off',
      complexity: 'off',
      'constructor-super': 'error',
      curly: 'error',
      'dot-notation': 'warn',
      'eol-last': 'off',
      eqeqeq: ['error', 'smart'],
      'guard-for-in': 'error',
      'id-blacklist': [
        'warn',
        'Number',
        'any',
        'number',
        'String',
        'string',
        'Boolean',
        'boolean',
        'Undefined',
        'undefined',
      ],
      'id-match': 'error',
      'import/no-extraneous-dependencies': [
        'warn',
        {
          devDependencies: false,
        },
      ],
      'import/no-internal-modules': 'off',
      'import/order': 'off',
      indent: 'off',
      'jsdoc/check-alignment': 'error',
      'jsdoc/check-indentation': 'warn',
      'jsdoc/newline-after-description': 'off',
      'linebreak-style': 'off',
      'max-classes-per-file': 'off',
      'max-len': 'off',
      'new-parens': 'off',
      'newline-per-chained-call': 'off',
      'no-bitwise': 'off',
      'no-caller': 'error',
      'no-cond-assign': 'error',
      'no-console': 'off',
      'no-debugger': 'error',
      'no-duplicate-case': 'error',
      'no-duplicate-imports': 'error',
      'no-empty': 'error',
      'no-empty-function': 'error',
      'no-eval': 'error',
      'no-extra-bind': 'error',
      'no-extra-semi': 'off',
      'no-fallthrough': 'off',
      'no-invalid-this': 'off',
      'no-irregular-whitespace': 'off',
      'no-multiple-empty-lines': 'off',
      'no-new-func': 'error',
      'no-new-wrappers': 'error',
      'no-redeclare': 'error',
      'no-return-await': 'error',
      'no-sequences': 'error',
      'no-shadow': 'off',
      'no-sparse-arrays': 'error',
      'no-template-curly-in-string': 'error',
      'no-throw-literal': 'error',
      'no-trailing-spaces': 'off',
      'no-undef-init': 'error',
      'no-underscore-dangle': 'error',
      'no-unsafe-finally': 'error',
      'no-unused-expressions': 'warn',
      'no-unused-labels': 'error',
      'no-use-before-define': 'off',
      'no-var': 'error',
      'object-shorthand': 'error',
      'one-var': ['error', 'never'],
      'padded-blocks': [
        'off',
        {
          blocks: 'never',
        },
        {
          allowSingleLineBlocks: true,
        },
      ],
      'prefer-const': 'error',
      'prefer-object-spread': 'error',
      'quote-props': 'off',
      quotes: 'off',
      radix: 'error',
      'react/jsx-curly-spacing': 'off',
      'react/jsx-equals-spacing': 'off',
      'react/jsx-tag-spacing': [
        'off',
        {
          afterOpening: 'allow',
          closingSlash: 'allow',
        },
      ],
  
      'comma-dangle': 'off',
      semi: 'off',
      'no-use-before-define': 'off',
      quotes: 'off',
      'no-param-reassign': 'off',
      'no-undef': 'off',
      camelcase: 'off',
      'import/extensions': [
        'warn',
        'never',
        {
          json: 'always',
          js: 'never',
          testData: 'always',
          testResults: 'always',
          testExpected: 'always',
          svg: 'always',
        },
      ],
      'import/no-unresolved': 'off',
      'import/prefer-default-export': 'off',
      'global-require': 'off',
      'no-plusplus': 'off',
      'operator-linebreak': 'off',
      'prefer-template': 'off',
      indent: 'off',
      'no-underscore-dangle': 'off',
      'arrow-parens': 'off',
      'implicit-arrow-linebreak': 'off',
      'function-paren-newline': 'off',
      'object-curly-newline': 'off',
      'no-nested-ternary': 'off',
      'prefer-destructuring': 'off',
      'arrow-body-style': 'off',
      'no-shadow': 'off',
      'import/no-webpack-loader-syntax': 'off',
      'import/no-extraneous-dependencies': 'off',
      'no-return-assign': ['error', 'except-parens'],
      'react/jsx-wrap-multilines': 'off',
      semi: 'off',
      'space-before-function-paren': 'off',
      'space-in-parens': ['off', 'never'],
      'spaced-comment': [
        'warn',
        'always',
        {
          markers: ['/'],
        },
      ],
      'unicorn/prefer-ternary': 'off',
      'use-isnan': 'error',
      'valid-typeof': 'off',
      'prettier/prettier': 'warn',
      // '@typescript-eslint/no-unnecessary-condition': 'off',
      'react/button-has-type': [
        'error',
        {
          button: true,
          submit: true,
          reset: true,
        },
      ],
    },
  };
  